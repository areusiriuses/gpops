%---------------------------------------------------%
%graduate project           %
%---------------------------------------------------%
% The problem solved here is given as follows:      %
%   Minimize -xf                                    %
% subject to the dynamic constraints                %
%    dv/dt = (p*cos(alpha)-fx-m*g*sin(theta))/m     %
%    dtheta/dt =(p*sin(alp)+fy-m*g*cos(theta))/(m*v)%
%    domegaz/dt =mz/jz                              %
%    dx/dt =  v*cos(theta)                          %
%    dy/dt = v*sin(theta)                           %
%    dthita/dt =omegaz                              %
%    alpha=thi-theta                                %
% and the boundary conditions                       %
%    v(0)=300  v(tf)=free                           %
%    theta(0)=30/57.3    theta(tf)=free             % 
%    omegaz(0)=0        omegaz(tf)=free             % 
%    x(0) = 0, y(0) = 0,                            %
%    x(tf) = free, y(tf) =0                %
%    thi(0)=31/57.3    thi(tf)=free                 % 
%     ny:[-4,4]                             %
%    ny=v/g*(dtheta/dt)+cos(theta)                  %
%---------------------------------------------------%
clear all; close all; clc


auxdata.s=0.2172;
auxdata.m=218.6;
auxdata.jz=99.984;
auxdata.l=2.8;
auxdata.p=800;

%%%%%%%%%%%%%%%%%%%constraints%%%%%%%%%%%%%%%%%%
t0 = 0; tmin = 0; tmax=500;tf=300;
v0=280; vmin=0;vmax=340;vfmin=150;                         
theta0=0; thetamin = -20/57.3; thetamax = 0;     thetaf = -10/57.3;
omegaz0=0; omegazmin=-20;omegazmax=20;              
x0 = 0;xmin=0;xmax=40000;xf=30000;xfmin=2000;
y0 = 1000;ymin = 0;ymax=1500;yf=0;%
thi0=0;thimin = -20/57.3; thimax = 0;thif = -10/57.3;
%control
umin=-10/57.3;umax=10/57.3;u0=0;

                 
%-------------------------------------------------------------------------%
%----------------------- Setup for Problem Bounds ------------------------%
%-------------------------------------------------------------------------%
iphase = 1;
bounds.phase.initialtime.lower = t0; 
bounds.phase.initialtime.upper = t0;
bounds.phase.finaltime.lower = tf; 
bounds.phase.finaltime.upper = tmax;
bounds.phase.initialstate.lower = [v0,theta0,omegaz0,x0,y0,thi0]; 
bounds.phase.initialstate.upper = [v0,theta0,omegaz0,x0,y0,thi0]; 
bounds.phase.state.lower = [vmin,thetamin,omegazmin,xmin,ymin,thimin];  
bounds.phase.state.upper = [vmax,thetamax,omegazmax,xmax,ymax,thimax];
bounds.phase.finalstate.lower = [vfmin,thetamin,omegazmin,xfmin,yf,thimin];  
bounds.phase.finalstate.upper = [vmax,thetamax,omegazmax,xmax,yf,thimax];
%aoa 
bounds.phase.control.lower = umin; 
bounds.phase.control.upper = umax;
%[ny,du,u=thi-theta];
% bounds.phase.path.lower = [-4,-1/57.3,0];
% bounds.phase.path.upper = [4,1/57.3,0];
bounds.phase.path.lower = 0;
bounds.phase.path.upper = 0;
%-------------------------------------------------------------------------%
%---------------------- Provide Guess of Solution ------------------------%
%-------------------------------------------------------------------------%
guess.phase.time    = [t0; tf]; 
guess.phase.state   = [[v0; vfmin],[theta0;thetaf],[omegaz0;omegazmin],[x0;xf],...
    [y0;yf],[thi0;thif]];
guess.phase.control = [0; 0];
%-------------------------------------------------------------------------%
%------------- Assemble Information into Problem Structure ---------------%        
%-------------------------------------------------------------------------%
setup.name = 'biyesheji';
setup.functions.continuous = @biyeshejiContinuoustest;
setup.functions.endpoint = @biyeshejiEndpoint;
setup.auxdata = auxdata;
setup.bounds = bounds;
setup.guess = guess;
%solver
setup.nlp.solver = 'ipopt';
setup.derivatives.supplier = 'sparseCD';
setup.derivatives.derivativelevel = 'second';
setup.mesh.method = 'hp1';
setup.mesh.tolerance = 5e-1;
setup.mesh.maxiteration = 45;
setup.mesh.colpointsmax = 4;
setup.mesh.colpointsmin = 10;
setup.mesh.phase.colpoints = 4*ones(1,10);
setup.mesh.phase.fraction =  0.1*ones(1,10);
setup.method = 'RPMintegration';
%-------------------------------------------------------------------------%
%------------------------- Solve Problem Using GPOP2 ---------------------%
%-------------------------------------------------------------------------%
output = gpops2(setup);
solution = output.result.solution;
%--------------------------------------------------------------------------%
%------------------------------- Plot Solution ----------------------------%
%--------------------------------------------------------------------------%
